
You are an expert security code auditor.
Your task is to identify all sensitive identifiers in the provided Swift code.
Analyze both the source code and its corresponding AST symbol information.

**Swift Source Code:**
```swift
import Foundation
import CryptoKit

struct AESEncryption {
    private let key: SymmetricKey
    
    init(keyData: Data) throws {
        guard keyData.count == 32 else {
            throw CryptoError.invalidKeySize
        }
        self.key = SymmetricKey(data: keyData)
    }
    
    func encrypt(_ data: Data) throws -> Data {
        let sealedBox = try AES.GCM.seal(data, using: key)
        return sealedBox.combined!
    }
    
    func decrypt(_ encryptedData: Data) throws -> Data {
        let sealedBox = try AES.GCM.SealedBox(combined: encryptedData)
        return try AES.GCM.open(sealedBox, using: key)
    }
    
    enum CryptoError: Error {
        case invalidKeySize
    }
    
    static func generateRandomKey() -> Data {
        let key = SymmetricKey(size: .bits256)
        return key.withUnsafeBytes { Data($0) }
    }
}
````
AST Symbol Information (JSON):
````[
  {
    "symbolName" : "AESEncryption",
    "symbolKind" : "struct"
  },
  {
    "symbolName" : "key",
    "symbolKind" : "variable",
    "typeSignature" : "SymmetricKey"
  },
  {
    "calls_out" : [
      "seal"
    ],
    "typeSignature" : "(_ data: Data) throws -> Data",
    "symbolKind" : "method",
    "symbolName" : "encrypt((_ data: Data) throws -> Data)",
    "references" : [
      "AES",
      "GCM",
      "combined",
      "data",
      "key",
      "seal",
      "sealedBox"
    ]
  },
  {
    "symbolKind" : "variable",
    "symbolName" : "sealedBox"
  },
  {
    "symbolKind" : "method",
    "references" : [
      "AES",
      "GCM",
      "SealedBox",
      "encryptedData",
      "key",
      "open",
      "sealedBox"
    ],
    "calls_out" : [
      "SealedBox",
      "open"
    ],
    "typeSignature" : "(_ encryptedData: Data) throws -> Data",
    "symbolName" : "decrypt((_ encryptedData: Data) throws -> Data)"
  },
  {
    "symbolName" : "sealedBox",
    "symbolKind" : "variable"
  },
  {
    "symbolName" : "generateRandomKey(() -> Data)",
    "symbolKind" : "method",
    "typeSignature" : "() -> Data",
    "calls_out" : [
      "Data",
      "SymmetricKey",
      "withUnsafeBytes"
    ],
    "references" : [
      "$0",
      "Data",
      "SymmetricKey",
      "bits256",
      "key",
      "withUnsafeBytes"
    ]
  },
  {
    "symbolKind" : "variable",
    "symbolName" : "key"
  }
]
````

Based on your analysis, provide a JSON list of strings containing only the simple base name of each sensitive identifier.

RULES for identifier names:

Provide ONLY the function, method, or variable name itself.

Do NOT include parameters, argument labels, or return types (e.g., (password:) -> Bool).

Do NOT include the parent class or struct name (e.g., MyKeychainManager.).

Examples of the required format:

For MyKeychainManager.save(password:), you must only include "save".

For let secretToken, you must only include "secretToken".

For AESGCMEncryption.decrypt(_:), you must only include "decrypt".

A correct final JSON list looks like this: ["save", "secretToken", "decrypt"]

Your response must be ONLY the JSON list, following these rules exactly.
